 /*
    Make New Joint [0.0.4]

    Script by : Nikhil Ramchandani (3D rigger)
    Connect with me on LinkedIn : https://www.linkedin.com/nikramchandani

    Run command :
    makeNewJoint("");
*/

global proc string makeNewJoint(string $args)
{
    if (`window -exists makeNewJoint_UI`)
    {
        deleteUI makeNewJoint_UI;
    }

    string $window = `window -title "makeNewJoint" makeNewJoint_UI`;

    columnLayout -adjustableColumn true;
    button -label "Create Joint Tool" -command ("createJointTool()");

    separator -style "single" -height 10;
    button -aop 1 -label "Create joint on selection" - command ("createJointOnSelection()");
    button -aop 1 -label "Create a joint on center of selection" -command ("createJointOnCenter()");
    button -aop 1 -label "Create joint chain on selection" -command ("createJointChainOnSelection()");
    button -aop 1 -label "Create joint chain between two points" -command ("createJointBwTwoPoints(\"5\")");

    separator -style "single" -height 10;
    button -aop 1 -label "Create locator" - command ("createLocator()");
    button -aop 1 -label "Create locator on selection" - command ("createLocatorOnSelection()");
    button -aop 1 -label "Create a locator on center of selection" -command ("createLocatorOnCenter()");

    separator -style "single" -height 10;
    button -aop 1 -label "Create Cluster" -command ("createCluster()");

    separator -style "single" -height 10;
    button -aop 1 -bgc 1 0 0 -label "Close" -command ("deleteUI -window " + $window);

    setParent ..;
    showWindow $window;

    return "Opened makeNewJoint";
}


global proc string createJointTool()
{
    string $createJointTool =`JointTool`;
    refresh;

    return $createJointTool;
}


global proc string[] createJointOnSelection()
{
    string $selection[] = `ls -sl`;
    string $jointName[];
    int $count = 0;

    select -cl;
    refresh;

    // Iterate through the selection
    for ($object in $selection)
    {
        // Get the position of the object
        float $pos[] = `xform -q -ws -t $object`;

        // Create a new joint at the object position
        $jointName[$count] = `joint -p $pos[0] $pos[1] $pos[2]`;

        //parent the joint to the world
        if(size(`listRelatives -p $jointName[$count]`) != 0)
        {
            parent -w $jointName[$count];
        }

        $count++;
    }

    return $jointName;
}


global proc string createJointOnCenter()
{
    string $selected[] = `ls -sl`; // Get the selected objects
    vector $centroid = <<0, 0, 0>>;
    int $count = size($selected);

    select -cl;
    refresh;

    // Loop through the selected objects and get their world space position
    for ($i = 0; $i < $count; $i++)
    {
        float $translation[] = `xform -q -ws -t $selected[$i]`;
        $centroid += <<$translation[0], $translation[1], $translation[2]>>;
    }

    // Calculate the centroid position
    $centroid /= $count;

    // Create a joint at the centroid position
    string $jointName = `joint -p ($centroid.x) ($centroid.y) ($centroid.z)`;

    return $jointName;
}

global proc string[] createJointChainOnSelection()
{
    string $selection[] = `ls -sl`;
    string $jointName[];
    int $count = 0;

    select -cl;
    refresh;

    // Iterate through the selection
    for ($object in $selection)
    {
        // Get the position of the object
        float $pos[] = `xform -q -ws -t $object`;

        // Create a new joint at the object position
        $jointName[$count] = `joint -p $pos[0] $pos[1] $pos[2]`;
        $count++;
    }

    return $jointName;
}

global proc string[] createJointBwTwoPoints(int $jointAmount)
{
    string $selected[] = `ls -sl`; // Get the selected objects
    vector $centroid[];
    string $jointName[];

    select -cl;
    refresh;

        // Loop through the selected objects and get their world space position
        for ($i = 0; $i < `size($selected)`; $i++)
        {
            $centroid[$i] = `xform -q -ws -t $selected[$i]`;
        }

        // getting the distnace between two objects
        vector $distance = $centroid[1] - $centroid[0];

        // placing each object at eual distance from each other between two points
        for($i = 0;$i < $jointAmount;$i++)
        {
            $jointName[$i] = `joint -p ((($distance.x) * ($i + 1)) / $jointAmount) ((($distance.y) * ($i + 1)) / $jointAmount) ((($distance.z) * ($i + 1)) / $jointAmount)`;
        }

        return $jointName;
}


global proc string createLocator()
{
    // creating a locator at origin
    string $createLocatorTool = `spaceLocator -p 0 0 0`;

    select -cl;
    refresh;

    return $createLocatorTool;
}


global proc int createLocatorOnSelection()
{
    string $selection[] = `ls -sl`;
    int $count = 0;

    // Iterate through the selection
    for ($object in $selection)
    {
        // Get the position of the object
        float $pos[] = `xform -q -ws -t $object`;
        
        select -cl;
        refresh;

        // Create a new locator at the object position
        spaceLocator -n ("newlocator" + $count) -p $pos[0] $pos[1] $pos[2];
        
        // transferring local position to world position
        for($axis in {"X","Y","Z"})
        {
            setAttr ("newlocator" + $count + ".translate" + $axis) `getAttr ("newlocator" + $count + "Shape.localPosition" + $axis)`;
            setAttr ("newlocator" + $count + "Shape.localPosition" + $axis) 0;
        }

        $count++;
    }

    return $count;
}


global proc string createLocatorOnCenter()
{
    string $selected[] = `ls -sl`; // Get the selected objects
    vector $centroid = <<0, 0, 0>>;
    int $count = size($selected);

    select -cl;
    refresh;

    // Loop through the selected objects and get their world space position
    for ($i = 0; $i < $count; $i++)
    {
        float $translation[] = `xform -q -ws -t $selected[$i]`;
        $centroid += <<$translation[0], $translation[1], $translation[2]>>;
    }

    // Calculate the centroid position
    $centroid /= $count;

    // Create a locator at the centroid position
    spaceLocator - n "centroidLocator" -p ($centroid.x) ($centroid.y) ($centroid.z);
        
    // transferring local position to world position
    for($axis in {"X","Y","Z"})
    {
        setAttr ("centroidLocator.translate" + $axis) `getAttr ("centroidLocatorShape.localPosition" + $axis)`;
        setAttr ("centroidLocatorShape.localPosition" + $axis) 0;
    }

    return "";
}

global proc string[] createCluster()
{
    // creating a cluster on selected object
    string $createCluster[] = `cluster`;

    return $createCluster;
}